//组件间通信


//子—>父组件的通信
<we-element name="foo">
    <template>
        <div>
            <image src="{{imageUrl}}" onclick="test"></image>
            <text>{{title}}</text>
        </div>
    </template>
    <script>
        module.exports = {
            data: {
                title: '',
                imageUrl: ''
            },
            methods: {
                test: function () {
                    this.$dispatch('notify', {a: 1})
                }
            }
        }
    </script>
</we-element>

<template>
    <foo title="..." image-url="..."></foo>
</template>

<script>
    module.exports = {
        created: function () {
            this.$on('notify', function(e) {
                //  when <foo> image tag  be clicked ,the function will be executing.
                // e.detail is  `{a: 1}`
            })
        }
    }
</script>


//父—>子 组件的通信
<we-element name="foo">
    <template>
        <div>
            <image src="{{imageUrl}}"></image>
            <text>{{title}}</text>
        </div>
    </template>
    <script>
        module.exports = {
            data: {
                title: '',
                imageUrl: ''
            },
            methods: {
                setTitle: function (t) {
                    this.title = t
                }
            }
        }
    </script>
</we-element>

<template>
    <div>
        <text onclick="test">click to update foo</text>
        <foo id="fooEl" title="..." image-url="..."></foo>
    </div>
</template>

<script>
    module.exports = {
        methods: {
            test: function (e) {
                var foo = this.$('fooEl')
                foo.setTitle('...')
                foo.imageUrl = '...'
            }
        }
    }
</script>

//父—>多子的通信（通过广播来完成）
<we-element name="bar">
    <template>
        <div>
            <image src="{{imageUrl}}"></image>
        </div>
    </template>
    <script>
        module.exports = {
            data: {
                imageUrl: ''
            },
            created: function() {
                var self = this
                this.$on('changeImage', function(e) {
                    self.imageUrl = e.detail.imageUrl
                })
            }
        }
    </script>
</we-element>

<we-element name="foo">
    <template>
        <div>
            <bar></bar>
            <text>{{title}}</text>
        </div>
    </template>
    <script>
        module.exports = {
            data: {
                title: ''
            },
            created: function() {
                var self = this
                this.$on('changeTitle', function(e) {
                    self.title = e.detail.title
                })
            }
        }
    </script>
</we-element>

<template>
    <div>
        <text onclick="test">click to update foo</text>
        <foo></foo>
        <foo></foo>
    </div>
</template>

<script>
    module.exports = {
        methods: {
            test: function (e) {
                this.$broadcast('changeTitle', {
                    title: '...'
                })
                this.$broadcast('changeImage', {
                    imageUrl: '...'
                })
            }
        }
    }
</script>



//兄弟组件的通信（通过父组件为桥梁通信）
<we-element name="foo">
    <template>...</template>
    <script>
        module.exports = {
            methods: {
                callbar: function () {
                    this.$dispatch('callbar', {a: 1})
                }
            }
        }
    </script>
</we-element>

<we-element name="bar">
    <template>...</template>
    <script>
        module.exports = {
            created: function() {
                this.$on('callbar', function(e) {
                    // e.detail.a
                })
            }
        }
    </script>
</we-element>

<template>
    <div>
        <foo></foo>
        <bar></bar>
    </div>
</template>

<script>
    module.exports = {
        created: function () {
            var self = this
            this.$on('callbar', function(e) {
                self.$broadcast('callbar', e.detail)
            })
        }
    }
</script>